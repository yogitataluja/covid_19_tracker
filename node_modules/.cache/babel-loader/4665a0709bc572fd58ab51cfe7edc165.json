{"ast":null,"code":"var _jsxFileName = \"/Users/yogita/Desktop/react_js/covidtrack/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { FormControl, MenuItem, Select } from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // code to get country in dropedown button\n  const [countries, setcountries] = useState([\"Worldwide\"]); // eslint-disable-next-lin\n\n  const [country, setcountry] = useState(\"Worldwide\");\n  useEffect(() => {\n    // Asynch->send a request, wait for it, do something with\n    const getcountrydata = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\") // send request to server and  wait until it respond\n      .then(response => response.json()) // after it come back with the response . I want to first get the entire response and just take the json from it\n      .then(data => {\n        //once i got that response which is basically resemble as our data essentially then i want to go and set countary \n        const countries = data.map(val => ( //I am going through every country and return slightly different shape or i want only some of the stuff  \n        {\n          // returning an object)                   // once i got that tree i want to restucture it\n          name: val.country,\n          value: val.countryInfo.iso2\n        }));\n        setcountries(countries);\n      });\n    };\n\n    getcountrydata();\n  }, []); //Run only when component load(refresh)\n\n  const onCountryChange = event => {\n    const countrycode = event.target.value; //  which value(country) we select is now store in countrycode or at placeof worldwide\n\n    setcountry(countrycode);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app_header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"COVID-19 Tracker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        className: \"app_control\",\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          onChange: onCountryChange,\n          variant: \"outlined\",\n          value: country,\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"Worldwide\",\n            children: \"Worldwide\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this), countries.map(country => {\n            return /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: country.value,\n              children: country.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 33\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app_status\",\n      children: /*#__PURE__*/_jsxDEV(InfoBox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"WQExD67XnTYMnatRmnenV3kRZb8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/yogita/Desktop/react_js/covidtrack/src/App.jsx"],"names":["React","useState","useEffect","FormControl","MenuItem","Select","InfoBox","App","countries","setcountries","country","setcountry","getcountrydata","fetch","then","response","json","data","map","val","name","value","countryInfo","iso2","onCountryChange","event","countrycode","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,SAASC,WAAT,EAAsBC,QAAtB,EAAgCC,MAAhC,QAA8C,mBAA9C;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAGA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAEd;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,CAAC,WAAD,CAAD,CAA1C,CAHc,CAId;;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,WAAD,CAAtC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AAEA,UAAMU,cAAc,GAAG,YAAY;AAC/B,YAAMC,KAAK,CAAC,0CAAD,CAAL,CAAkD;AAAlD,OACDC,IADC,CACKC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADlB,EACmC;AADnC,OAEDF,IAFC,CAEKG,IAAD,IAAU;AAAG;AACf,cAAMT,SAAS,GAAGS,IAAI,CAACC,GAAL,CAAUC,GAAD,MAAY;AACnC;AAAsC;AAClCC,UAAAA,IAAI,EAAED,GAAG,CAACT,OADd;AAEIW,UAAAA,KAAK,EAAEF,GAAG,CAACG,WAAJ,CAAgBC;AAF3B,SADuB,CAAT,CAAlB;AAMAd,QAAAA,YAAY,CAACD,SAAD,CAAZ;AACH,OAVC,CAAN;AAWH,KAZD;;AAaAI,IAAAA,cAAc;AACjB,GAjBQ,EAiBN,EAjBM,CAAT,CANc,CAuBR;;AAEN,QAAMY,eAAe,GAAIC,KAAD,IAAW;AAC/B,UAAMC,WAAW,GAAGD,KAAK,CAACE,MAAN,CAAaN,KAAjC,CAD+B,CACQ;;AACvCV,IAAAA,UAAU,CAACe,WAAD,CAAV;AAEH,GAJD;;AAMA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,WAAD;AAAa,QAAA,SAAS,EAAC,aAAvB;AAAA,+BACI,QAAC,MAAD;AAAQ,UAAA,QAAQ,EAAEF,eAAlB;AAAmC,UAAA,OAAO,EAAC,UAA3C;AAAsD,UAAA,KAAK,EAAEd,OAA7D;AAAA,kCACI,QAAC,QAAD;AAAU,YAAA,KAAK,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAGKF,SAAS,CAACU,GAAV,CAAeR,OAAD,IAAa;AACxB,gCACI,QAAC,QAAD;AAAU,cAAA,KAAK,EAAEA,OAAO,CAACW,KAAzB;AAAA,wBAAiCX,OAAO,CAACU;AAAzC;AAAA;AAAA;AAAA;AAAA,oBADJ;AAGH,WAJA,CAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAkBI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACA,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgCH,CA/DD;;GAAMb,G;;KAAAA,G;AAiEN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport { FormControl, MenuItem, Select } from '@material-ui/core';\nimport InfoBox from './InfoBox';\n\n\nconst App = () => {\n\n    // code to get country in dropedown button\n    const [countries, setcountries] = useState([\"Worldwide\"])\n    // eslint-disable-next-lin\n    const [country, setcountry] = useState(\"Worldwide\")\n    useEffect(() => {\n        // Asynch->send a request, wait for it, do something with\n\n        const getcountrydata = async () => {\n            await fetch(\"https://disease.sh/v3/covid-19/countries\") // send request to server and  wait until it respond\n                .then((response) => response.json()) // after it come back with the response . I want to first get the entire response and just take the json from it\n                .then((data) => {  //once i got that response which is basically resemble as our data essentially then i want to go and set countary \n                    const countries = data.map((val) => (  //I am going through every country and return slightly different shape or i want only some of the stuff  \n                        {                                     // returning an object)                   // once i got that tree i want to restucture it\n                            name: val.country,\n                            value: val.countryInfo.iso2\n                        }))\n\n                    setcountries(countries)\n                })\n        }\n        getcountrydata()\n    }, [])//Run only when component load(refresh)\n\n    const onCountryChange = (event) => {\n        const countrycode = event.target.value //  which value(country) we select is now store in countrycode or at placeof worldwide\n        setcountry(countrycode)\n\n    }\n\n    return (\n        <div className=\"app\">\n            {/* Header */}\n            <div className=\"app_header\">\n                {/* Title+ select input drop down button */}\n                <h1>COVID-19 Tracker</h1>\n                <FormControl className=\"app_control\">\n                    <Select onChange={onCountryChange} variant=\"outlined\" value={country}>\n                        <MenuItem value=\"Worldwide\">Worldwide</MenuItem>\n                        {/* loop through all the countary  and show dropdown with option */}\n                        {countries.map((country) => {\n                            return (\n                                <MenuItem value={country.value}>{country.name}</MenuItem>\n                            )\n                        })}\n                    </Select>\n                </FormControl>\n            </div>\n\n            <div className=\"app_status\">\n            <InfoBox/>\n\n                {/* info box */}\n                {/* info box */}\n                {/* info box */}\n            </div>\n\n            {/* table */}\n            {/* Graph */}\n            {/* Map */}\n        </div>\n    )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}