{"ast":null,"code":"var _jsxFileName = \"/Users/yogita/Desktop/react_js/covidtrack/src/LineGraph.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport numeral from 'numeral';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      time: {\n        format: \"MM/DD/YY\",\n        tooltipFormat: \"ll\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        // Include a dollar sign in the ticks\n        callback: function (value, index, values) {\n          return numeral(value).format(\"0a\");\n        }\n      }\n    }]\n  }\n};\n\nconst LineGraph = () => {\n  _s();\n\n  const [data, setdata] = useState({});\n\n  const buildChartData = (data, casesType = \"cases\") => {\n    const chartData = [];\n    let lastDataPoint; //empty object\n    // data[casesType].forEach(date=>\n\n    for (let date in data.cases) {\n      if (lastDataPoint) {\n        const newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint\n        };\n        chartData.push(newDataPoint);\n      }\n\n      lastDataPoint = data[casesType][date];\n    }\n\n    return chartData;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\").then(response => response.json()).then(data => {\n        console.log(data);\n        const chartData = buildChartData(data, 'cases');\n        setdata(chartData);\n      });\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"I am a Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: {\n        datasets: [{\n          backgroundColor: \"rgba(204,16, 52, 0.5)\",\n          borderColor: '#CC1034',\n          data: data\n        }]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 13\n  }, this);\n};\n\n_s(LineGraph, \"+PywrUXddRgeVvQSVgpey8V656M=\");\n\n_c = LineGraph;\nexport default LineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"sources":["/Users/yogita/Desktop/react_js/covidtrack/src/LineGraph.jsx"],"names":["React","useState","useEffect","Line","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","setdata","buildChartData","casesType","chartData","lastDataPoint","date","cases","newDataPoint","x","y","push","fetchData","fetch","then","response","json","console","log","datasets","backgroundColor","borderColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Line } from \"react-chartjs-2\"\nimport numeral from 'numeral'\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0,\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            },\n        },\n    },\n    scales: {\n        xAxes: [\n            {\n                type: \"time\",\n                time: {\n                    format: \"MM/DD/YY\",\n                    tooltipFormat: \"ll\",\n                },\n            },\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n                },\n                ticks: {\n                    // Include a dollar sign in the ticks\n                    callback: function (value, index, values) {\n                        return numeral(value).format(\"0a\");\n                    },\n                },\n            },\n        ],\n    },\n};\n\n\n\nconst LineGraph = () => {\n\n    const [data, setdata] = useState({})\n\n\n    const buildChartData = (data, casesType = \"cases\") => {\n        const chartData = []\n        let lastDataPoint;  //empty object\n        // data[casesType].forEach(date=>\n        for (let date in data.cases) {\n            if (lastDataPoint) {\n                const newDataPoint = {\n                    x: date,\n                    y: data[casesType][date] - lastDataPoint\n                }\n                chartData.push(newDataPoint)\n            }\n            lastDataPoint = data[casesType][date]\n        }\n        return chartData\n    }\n\n    useEffect(() => {\n\n        const fetchData = async () => {\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n                .then(response => response.json())\n                .then(data => {\n                    console.log(data)\n                    const chartData = buildChartData(data, 'cases')\n                    setdata(chartData)\n                })\n        }\n        fetchData()\n    }, [])\n\n    \n\n        return (\n            <div>\n                <h1>I am a Graph</h1>\n                <Line\n                    options={options}\n                    data={{\n                        datasets: [{\n                            backgroundColor: \"rgba(204,16, 52, 0.5)\",\n                            borderColor: '#CC1034',\n                            data: data\n                        }\n                        ]\n                    }}\n\n                />\n            </div>\n        )\n    }\n\n    export default LineGraph\n"]},"metadata":{},"sourceType":"module"}