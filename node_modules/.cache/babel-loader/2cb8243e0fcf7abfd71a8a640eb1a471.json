{"ast":null,"code":"var _jsxFileName = \"/Users/yogita/Desktop/react_js/covidtrack/src/LineGraph.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport numeral from 'numeral';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      time: {\n        format: \"MM/DD/YY\",\n        tooltipFormat: \"ll\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        // Include a dollar sign in the ticks\n        callback: function (value, index, values) {\n          return numeral(value).format(\"0a\");\n        }\n      }\n    }]\n  }\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint; //empty object\n  // data[casesType].forEach(date=>\n\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint\n      };\n      chartData.push(newDataPoint);\n    }\n\n    lastDataPoint = data[casesType][date];\n  }\n\n  return chartData;\n};\n\nconst LineGraph = ({\n  casesType = \"cases\"\n}) => {\n  _s();\n\n  const [data, setdata] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\").then(response => {\n        return response.json();\n      }).then(data => {\n        let chartData = buildChartData(data, 'cases');\n        setdata(chartData);\n        console.log(chartData);\n      });\n    };\n\n    fetchData();\n  }, [casesType]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"I am a Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }, this), (data === null || data === void 0 ? void 0 : data.length) > 0 && /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: {\n        datasets: [{\n          backgroundColor: \"rgba(204,16, 52, 0.5)\",\n          borderColor: '#CC1034',\n          data: data\n        }]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 13\n  }, this);\n};\n\n_s(LineGraph, \"+PywrUXddRgeVvQSVgpey8V656M=\");\n\n_c = LineGraph;\nexport default LineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"sources":["/Users/yogita/Desktop/react_js/covidtrack/src/LineGraph.jsx"],"names":["React","useState","useEffect","Line","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","chartData","lastDataPoint","date","cases","newDataPoint","x","y","push","LineGraph","setdata","fetchData","fetch","then","response","json","console","log","length","datasets","backgroundColor","borderColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Line } from \"react-chartjs-2\"\nimport numeral from 'numeral'\nconst options = {\n    legend: {\n      display: false,\n    },\n    elements: {\n      point: {\n        radius: 0,\n      },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n      callbacks: {\n        label: function (tooltipItem, data) {\n          return numeral(tooltipItem.value).format(\"+0,0\");\n        },\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            format: \"MM/DD/YY\",\n            tooltipFormat: \"ll\",\n          },\n        },\n      ],\n      yAxes: [\n        {\n          gridLines: {\n            display: false,\n          },\n          ticks: {\n            // Include a dollar sign in the ticks\n            callback: function (value, index, values) {\n              return numeral(value).format(\"0a\");\n            },\n          },\n        },\n      ],\n    },\n  };\n\nconst buildChartData = (data, casesType ) => {\n    let chartData = []\n    let lastDataPoint;  //empty object\n    // data[casesType].forEach(date=>\n    for (let date in data.cases) {\n        if (lastDataPoint) {\n            let newDataPoint = {\n                x: date,\n                y: data[casesType][date] - lastDataPoint\n            }\n            chartData.push(newDataPoint)\n        }\n        lastDataPoint = data[casesType][date]\n    }\n    return chartData\n}\n\n\nconst LineGraph = ({casesType=\"cases\"}) => {\n    const [data, setdata] = useState({})\n\n    useEffect(() => {\n\n        const fetchData = async () => {\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n                .then((response) => {\n                return response.json()\n                })\n                .then(data => {\n                    let chartData = buildChartData(data, 'cases')\n                    setdata(chartData)\n                    console.log(chartData)\n\n                })\n        }\n        fetchData()\n    }, [casesType])\n\n    \n\n        return (\n            <div>\n                <h1>I am a Graph</h1>\n                {data?.length > 0 && (\n                    <Line\n                    options={options}\n                    data={{\n                        datasets: [{\n                            backgroundColor: \"rgba(204,16, 52, 0.5)\",\n                            borderColor: '#CC1034',\n                            data: data\n                        }\n                        ]\n                    }}\n\n                />\n                )}\n                \n            </div>\n        )\n    }\n\n    export default LineGraph\n"]},"metadata":{},"sourceType":"module"}