{"version":3,"sources":["InfoBox.jsx","Map.jsx","Table.jsx","util.jsx","LineGraph.jsx","App.jsx","index.js"],"names":["InfoBox","title","cases","total","Card","className","CardContent","Typography","color","Map","center","zoom","TileLayer","url","attribution","Table","countries","map","country","sortData","data","sort","a","b","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setcountries","setcountry","countryInfo","setcountryInfo","tableData","setTableData","lat","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","val","name","iso2","sortedData","getcountrydata","onCountryChange","event","countryCode","target","long","FormControl","Select","onChange","variant","MenuItem","todayCases","todayRecovered","recovered","todayDeaths","deaths","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1bc17ce.chunk.js","sourcesContent":["import React from 'react'\nimport { Card,CardContent,Typography } from '@material-ui/core'\n\n\nconst InfoBox = ({title, cases, total}) => {\n\n    \n    return (\n        <>\n          <Card className=\"infoBox\">\n              <CardContent>\n                  <Typography className=\"infoBox_title\" color=\"textSecondary\">{title}</Typography>\n                  <h2 className=\"infoBox_cases\">{cases}</h2>\n                  <Typography className=\"infoBox_total\"  color=\"textSecondary\" >{total}</Typography>\n              </CardContent>\n          </Card>  \n        </>\n    )\n}\n\nexport default InfoBox \n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\n\nconst Map = ({center, zoom}) => {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'/>\n          {/* loodthroug and draw bunch of circle */}\n            </LeafletMap>\n\n        </div>\n    )\n}\n\nexport default Map\n","import React from 'react'\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"\nimport \"../node_modules/bootstrap/dist/js/bootstrap.bundle\"\n\nconst Table = ({countries}) => {\n    return (\n        <div className=\"table  \">\n        {countries.map(({country,cases})=>( //by destructuing so no need to put value and use valu.country to get value of country\n            <tr>\n                <td>{country}</td>\n                <td><strong>{cases}</strong></td>\n            </tr>\n            ))}\n            \n        </div>\n    )\n}\n\nexport default Table\n","export const sortData = (data) =>{\n    const sortedData = [...data]\n    return sortedData.sort((a,b) => (a.cases > b.cases ? -1 :  1) )\n}\n\n\n\n\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType=\"cases\" }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log(chartData);\n          // buildChart(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;","import React, { useState, useEffect } from 'react'\nimport { FormControl, MenuItem, Select, Card, CardContent } from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"\nimport \"../node_modules/bootstrap/dist/js/bootstrap.bundle\"\nimport Map from './Map'\nimport Table from './Table'\nimport { sortData } from './util'\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\"\n\n\n\n\nconst App = () => {\n    // code to get country in dropedown button\n    const [countries, setcountries] = useState([\"Worldwide\"])\n    // eslint-disable-next-lin\n    const [country, setcountry] = useState(\"Worldwide\")\n\n    const [countryInfo, setcountryInfo] = useState({})\n\n    const [tableData, setTableData] = useState([])\n    const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n    const [mapZoom, setMapZoom] = useState(3);\n\n\n    useEffect(() => {\n        // Asynch->send a request, wait for it, do something with\n\n        const getcountrydata = async () => {\n            await fetch(\"https://disease.sh/v3/covid-19/countries\") // send request to server and  wait until it respond\n                .then((response) => response.json()) // after it come back with the response . I want to first get the entire response and just take the json from it\n                .then((data) => {  //once i got that response which is basically resemble as our data essentially then i want to go and set countary \n                    const countries = data.map((val) => (  //I am going through every country and return slightly different shape or i want only some of the stuff  \n                        {                                     // returning an object)                   // once i got that tree i want to restucture it\n                            name: val.country,\n                            value: val.countryInfo.iso2\n                        }))\n                    const sortedData = sortData(data)\n                    setTableData(sortedData)\n                    setcountries(countries)\n                })\n        }\n        getcountrydata()\n    }, [])//Run only when component load(refresh)\n\n    // code start for info box update\n\n    // code to implement worldwide\n    useEffect(() => {\n        fetch(\"https://disease.sh/v3/covid-19/all\")\n            .then((response) => response.json())\n            .then((data) => {\n                setcountryInfo(data)\n\n            })\n    }, [])\n\n    const onCountryChange = async (event) => {\n        const countryCode = event.target.value //  which value(country) we select is now store in countryCode or at placeof worldwide\n        setcountry(countryCode)\n        const url = \n        countryCode === \"Worlwide\" ? \n        \"https://disease.sh/v3/covid-19/all\" : \n        `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n        // if select worldwide show all https://disease.sh/v3/covid-19/all\n        // if select any country  https://disease.sh/v3/covid-19/country_code\n        await fetch(url)\n            .then((response) => response.json())\n            .then((data) => {\n                setcountry(countryCode)\n                setcountryInfo(data)\n                setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n            })\n\n    }\n    console.log(\"Country Info\", countryInfo)\n\n\n    return (\n        <div className=\"app  d-flex justify-content-evenly\">\n            <div className=\"app_left\">\n                <div className=\"app_header\">\n                    {/* Title+ select input drop down button */}\n                    <h1>COVID-19 Tracker</h1>\n                    <FormControl className=\"app_control\">\n                        <Select onChange={onCountryChange} variant=\"outlined\" value={country}>\n                            <MenuItem value=\"Worldwide\">Worldwide</MenuItem>\n                            {/* loop through all the countary  and show dropdown with option */}\n                            {countries.map((country) => {\n                                return (\n                                    <MenuItem value={country.value}>{country.name}</MenuItem>\n                                )\n                            })}\n                        </Select>\n                    </FormControl>\n                </div>\n                <div className=\"app_status d-flex justify-content-between\">\n                    <InfoBox title=\"Coronavirus Cases\" cases={countryInfo.todayCases} total={countryInfo.cases} />\n                    <InfoBox title=\"Recovered\" cases={countryInfo.todayRecovered} total={countryInfo.recovered} />\n                    <InfoBox title=\"Deaths\" cases={countryInfo.todayDeaths} total={countryInfo.deaths} />\n                </div>\n                {/* Map */}\n                <Map center={mapCenter}\n                zoom={mapZoom} />\n            </div>\n\n            <Card className=\"app_right \">\n                <CardContent>    {/*Cardcontent give us nice white background area   */}\n                    <h3>Live Cases by Country</h3>\n                    {/* table */}\n                    <Table className=\"table table-striped\" countries={tableData} />\n                    <h3>Worldwide new Cases</h3>\n                    {/* Graph */}\n                    <LineGraph />\n                </CardContent>\n            </Card>\n        </div>\n\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nReactDOM.render(<App/>,document.getElementById('root'))"],"sourceRoot":""}